
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  000009a2  00000a36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800116  00800116  00000aec  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b4  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000734  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d8  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a0f  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000020fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023c  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000406  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	46 c0       	rjmp	.+140    	; 0x9e <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__vector_16>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ea       	ldi	r30, 0xA2	; 162
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 31       	cpi	r26, 0x16	; 22
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a6 e1       	ldi	r26, 0x16	; 22
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 34       	cpi	r26, 0x4A	; 74
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d5 d2       	rcall	.+1450   	; 0x604 <main>
  5a:	a1 c4       	rjmp	.+2370   	; 0x99e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_16>:
	: "r" (x), "r" (y)	\
	)

/* Interrupt implementation */
SIGNAL(SIG_COMPARATOR)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  if (measure_state == STATE_LOW_THRESH) {
  6a:	80 91 27 01 	lds	r24, 0x0127
  6e:	81 30       	cpi	r24, 0x01	; 1
  70:	31 f4       	brne	.+12     	; 0x7e <__vector_16+0x20>
    /* We just got low threshold interrupt, start timer and set high threshold */
    TIMER_START;
  72:	8e bd       	out	0x2e, r24	; 46
    ADMUX = set_admux;
  74:	80 91 26 01 	lds	r24, 0x0126
  78:	87 b9       	out	0x07, r24	; 7
    measure_state = STATE_HIGH_THRESH;
  7a:	82 e0       	ldi	r24, 0x02	; 2
  7c:	08 c0       	rjmp	.+16     	; 0x8e <__vector_16+0x30>
  }
  else if(measure_state == STATE_HIGH_THRESH) {
  7e:	80 91 27 01 	lds	r24, 0x0127
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	31 f4       	brne	.+12     	; 0x92 <__vector_16+0x34>
    /* High threshold interrupt, verify it, then stop timer */
    if (ACSR & (1<<ACO)) {
  86:	45 9b       	sbis	0x08, 5	; 8
  88:	04 c0       	rjmp	.+8      	; 0x92 <__vector_16+0x34>
      TIMER_STOP;
  8a:	1e bc       	out	0x2e, r1	; 46
      measure_state = STATE_DONE;
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	80 93 27 01 	sts	0x0127, r24
    }
  }
}
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <__vector_8>:


SIGNAL(SIG_OVERFLOW1)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  /* Timer 1 counts the low 16 bits, this interrupt updates the high 16 bits */
  timer_highword++;
  ac:	80 91 28 01 	lds	r24, 0x0128
  b0:	90 91 29 01 	lds	r25, 0x0129
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 29 01 	sts	0x0129, r25
  ba:	80 93 28 01 	sts	0x0128, r24
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <init>:

void init(void)
{
  
  /* Set datadirections */
  DDRD = (1<<4); /* led output, rest input */
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	81 bb       	out	0x11, r24	; 17
  PORTD &= ~(1<<6); /* AIN0 port must be 0 */
  d0:	96 98       	cbi	0x12, 6	; 18
  
  /* Enable button pull up resistor */
  PORTD |= (1<<2);
  d2:	92 9a       	sbi	0x12, 2	; 18
  
  /* Setup timer1 to normal operation */
  TCCR1A = 0;
  d4:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = 0;
  d6:	1e bc       	out	0x2e, r1	; 46
  TIMSK = (1<<TOIE1); //(mega8)
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	89 bf       	out	0x39, r24	; 57
  //TIMSK1 = (1<<TOIE1); //(mega48/88/168)
  
  
  /* Setup analog comperator to generate rising edge interrupt */
  ACSR = (1<<ACIS0)|(1<<ACIS1)|(1<<ACIE);
  dc:	8b e0       	ldi	r24, 0x0B	; 11
  de:	88 b9       	out	0x08, r24	; 8
  
  /* Setup analog comperator to use ADMUX */
  ADMUX = ADMUX_LOW;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	87 b9       	out	0x07, r24	; 7
  SFIOR |= (1<<ACME);
  e4:	80 b7       	in	r24, 0x30	; 48
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	80 bf       	out	0x30, r24	; 48
  ADCSRA |= (1<<ACME);  		//I commented this to just check
  ea:	33 9a       	sbi	0x06, 3	; 6
  
  //DIDR1 |= (1<<AIN1D)|(1<<AIN0D); 
  //DIDR0 |= (1<<AIN1)|(1<<AIN0); 
  
}
  ec:	08 95       	ret

000000ee <menu>:
}

/* Hold-down-button menu implementation: */
  
char menu(void)
{
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  unsigned char i;
  
  lcd_clear();
  f4:	31 d3       	rcall	.+1634   	; 0x758 <lcd_clear>
  f6:	c9 ed       	ldi	r28, 0xD9	; 217
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	10 e0       	ldi	r17, 0x00	; 0
  
  for (i=0; i<MENU_ITEMS; i++) {
    lcd_string(menu_item[i],0);
  fc:	88 81       	ld	r24, Y
  fe:	99 81       	ldd	r25, Y+1	; 0x01
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	2e d3       	rcall	.+1628   	; 0x760 <lcd_string>
    ms_spin(MENU_SPEED);
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	d8 d2       	rcall	.+1456   	; 0x6ba <ms_spin>
    
    if (!BUTTON_PUSHED)
 10a:	82 99       	sbic	0x10, 2	; 16
 10c:	0a c0       	rjmp	.+20     	; 0x122 <menu+0x34>
{
  unsigned char i;
  
  lcd_clear();
  
  for (i=0; i<MENU_ITEMS; i++) {
 10e:	1f 5f       	subi	r17, 0xFF	; 255
 110:	22 96       	adiw	r28, 0x02	; 2
 112:	16 30       	cpi	r17, 0x06	; 6
 114:	99 f7       	brne	.-26     	; 0xfc <menu+0xe>
    
  }
  
  if (i == MENU_ITEMS) {
    /* Just clear display, if user went out of menu */
    lcd_clear();
 116:	20 d3       	rcall	.+1600   	; 0x758 <lcd_clear>
    
    /* Wait for release of button */
    while (BUTTON_PUSHED);
 118:	82 9b       	sbis	0x10, 2	; 16
 11a:	fe cf       	rjmp	.-4      	; 0x118 <menu+0x2a>
    ms_spin(10);
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	14 c0       	rjmp	.+40     	; 0x14a <menu+0x5c>
   
  }
  else {
    /* Flash selected item */
    lcd_clear();  
 122:	1a d3       	rcall	.+1588   	; 0x758 <lcd_clear>
    ms_spin(MENU_SPEED >> 2);
 124:	88 ec       	ldi	r24, 0xC8	; 200
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	c8 d2       	rcall	.+1424   	; 0x6ba <ms_spin>
    lcd_string(menu_item[i],0);
 12a:	e1 2f       	mov	r30, r17
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e7 52       	subi	r30, 0x27	; 39
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	80 81       	ld	r24, Z
 138:	91 81       	ldd	r25, Z+1	; 0x01
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	11 d3       	rcall	.+1570   	; 0x760 <lcd_string>
    ms_spin(MENU_SPEED >> 1);
 13e:	80 e9       	ldi	r24, 0x90	; 144
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	bb d2       	rcall	.+1398   	; 0x6ba <ms_spin>
    lcd_clear();
 144:	09 d3       	rcall	.+1554   	; 0x758 <lcd_clear>
    ms_spin(MENU_SPEED >> 2);
 146:	88 ec       	ldi	r24, 0xC8	; 200
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	b7 d2       	rcall	.+1390   	; 0x6ba <ms_spin>
    
  }
  
  return i;
}
 14c:	81 2f       	mov	r24, r17
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	08 95       	ret

00000156 <measure>:
  eeprom_write_block(calib, (void*)EEPROM_DATA + SIZE_OF_CALIBOFFSET, SIZE_OF_CALIB);

}

long measure(void)
{
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
  unsigned short i;
  
  measure_state = STATE_IDLE;
 15e:	10 92 27 01 	sts	0x0127, r1
  
  /* Discharge cap until below low threshold + some extra */
  ADMUX = ADMUX_LOW;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	87 b9       	out	0x07, r24	; 7
  PULLDOWN_RANGE;      /* Use range signal as pull down */
 166:	95 98       	cbi	0x12, 5	; 18
 168:	8d 9a       	sbi	0x11, 5	; 17
  
  while(1) {
    /* Enable comperator and check value */
    DISCHARGE_OFF;
 16a:	8e 98       	cbi	0x11, 6	; 17
    ms_spin(1);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	a4 d2       	rcall	.+1352   	; 0x6ba <ms_spin>
    
    /* This value must be checked in every loop */
    if (BUTTON_PUSHED)
 172:	82 9b       	sbis	0x10, 2	; 16
 174:	86 c0       	rjmp	.+268    	; 0x282 <measure+0x12c>
      return 0;
      
    if (!(ACSR & (1<<ACO)))
 176:	45 9b       	sbis	0x08, 5	; 8
 178:	05 c0       	rjmp	.+10     	; 0x184 <measure+0x2e>
      break;
    
    /* Discharge for a while */
    DISCHARGE_ON;
 17a:	8e 9a       	sbi	0x11, 6	; 17
    ms_spin(10);
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9c d2       	rcall	.+1336   	; 0x6ba <ms_spin>
 182:	f3 cf       	rjmp	.-26     	; 0x16a <measure+0x14>
    
    
  } 
  
  DISCHARGE_ON;
 184:	8e 9a       	sbi	0x11, 6	; 17
  ms_spin(EXTRA_DISCHARGE_MS);
 186:	84 e6       	ldi	r24, 0x64	; 100
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	97 d2       	rcall	.+1326   	; 0x6ba <ms_spin>
  
  /* Prepare: reset timer, low range */
  TIMER_STOP;
 18c:	1e bc       	out	0x2e, r1	; 46
  TIMER_VALUE = 0;
 18e:	1d bc       	out	0x2d, r1	; 45
 190:	1c bc       	out	0x2c, r1	; 44
  timer_highword = 0;
 192:	10 92 29 01 	sts	0x0129, r1
 196:	10 92 28 01 	sts	0x0128, r1

  LOW_RANGE;
 19a:	8d 98       	cbi	0x11, 5	; 17
 19c:	95 98       	cbi	0x12, 5	; 18

  measure_state = STATE_LOW_THRESH;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 27 01 	sts	0x0127, r24
  
  /* High or medium threshold */
  if (rangemode & RANGE_HIGH_THRESH)
 1a4:	80 91 83 00 	lds	r24, 0x0083
 1a8:	98 2f       	mov	r25, r24
 1aa:	80 ff       	sbrs	r24, 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <measure+0x5c>
    set_admux = ADMUX_HIGH;
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <measure+0x5e>
  else
    set_admux = ADMUX_MEDIUM;
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	80 93 26 01 	sts	0x0126, r24
  
  /* Apply step */
  LED_ON;
 1b8:	94 98       	cbi	0x12, 4	; 18
  DISCHARGE_OFF;
 1ba:	8e 98       	cbi	0x11, 6	; 17
  
  if (rangemode & RANGE_AUTO) {
 1bc:	92 ff       	sbrs	r25, 2
 1be:	27 c0       	rjmp	.+78     	; 0x20e <measure+0xb8>
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <measure+0x7a>
  
    /* Autorange: See if low range produces something before LOW_RANGE_TIMEOUT ms */
    i = 0;
    while ((measure_state == STATE_LOW_THRESH) && (++i < LOW_RANGE_TIMEOUT)) {
      ms_spin(1);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	77 d2       	rcall	.+1262   	; 0x6ba <ms_spin>
      
      /* This value must be checked in every loop */
      if (BUTTON_PUSHED)
 1cc:	82 9b       	sbis	0x10, 2	; 16
 1ce:	59 c0       	rjmp	.+178    	; 0x282 <measure+0x12c>
  
  if (rangemode & RANGE_AUTO) {
  
    /* Autorange: See if low range produces something before LOW_RANGE_TIMEOUT ms */
    i = 0;
    while ((measure_state == STATE_LOW_THRESH) && (++i < LOW_RANGE_TIMEOUT)) {
 1d0:	80 91 27 01 	lds	r24, 0x0127
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	39 f4       	brne	.+14     	; 0x1e6 <measure+0x90>
 1d8:	0f 5f       	subi	r16, 0xFF	; 255
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	04 3f       	cpi	r16, 0xF4	; 244
 1e0:	18 07       	cpc	r17, r24
 1e2:	89 f7       	brne	.-30     	; 0x1c6 <measure+0x70>
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <measure+0x96>
      /* This value must be checked in every loop */
      if (BUTTON_PUSHED)
        return 0;
    }
    
    if (i >= LOW_RANGE_TIMEOUT) {
 1e6:	04 5f       	subi	r16, 0xF4	; 244
 1e8:	11 40       	sbci	r17, 0x01	; 1
 1ea:	58 f0       	brcs	.+22     	; 0x202 <measure+0xac>
      /* low range timeout, go to high range (better discharge a little first) */
      DISCHARGE_ON;
 1ec:	8e 9a       	sbi	0x11, 6	; 17
      ms_spin(EXTRA_DISCHARGE_MS); 
 1ee:	84 e6       	ldi	r24, 0x64	; 100
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	63 d2       	rcall	.+1222   	; 0x6ba <ms_spin>
      DISCHARGE_OFF;
 1f4:	8e 98       	cbi	0x11, 6	; 17
      HIGH_RANGE;
 1f6:	95 9a       	sbi	0x12, 5	; 18
 1f8:	8d 9a       	sbi	0x11, 5	; 17
      rangemode |= RANGE_HIGH;
 1fa:	80 91 83 00 	lds	r24, 0x0083
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	03 c0       	rjmp	.+6      	; 0x208 <measure+0xb2>
    }
    else {
      /* low range was ok, set flag accordingly */
      rangemode &= ~RANGE_HIGH;
 202:	80 91 83 00 	lds	r24, 0x0083
 206:	8d 7f       	andi	r24, 0xFD	; 253
 208:	80 93 83 00 	sts	0x0083, r24
 20c:	0b c0       	rjmp	.+22     	; 0x224 <measure+0xce>
    }
  }
  else if (rangemode & RANGE_HIGH) {
 20e:	91 ff       	sbrs	r25, 1
 210:	09 c0       	rjmp	.+18     	; 0x224 <measure+0xce>
    HIGH_RANGE;
 212:	95 9a       	sbi	0x12, 5	; 18
 214:	8d 9a       	sbi	0x11, 5	; 17
 216:	06 c0       	rjmp	.+12     	; 0x224 <measure+0xce>
  }
  
  /* Wait for completion, timing out after HIGH_RANGE_TIMEOUT */
  i = 0;
  while ((measure_state != STATE_DONE) && (++i < HIGH_RANGE_TIMEOUT)) {
    ms_spin(1);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	4e d2       	rcall	.+1180   	; 0x6ba <ms_spin>
    
    /* This value must be checked in every loop */
    if (BUTTON_PUSHED)
 21e:	82 99       	sbic	0x10, 2	; 16
 220:	03 c0       	rjmp	.+6      	; 0x228 <measure+0xd2>
 222:	2f c0       	rjmp	.+94     	; 0x282 <measure+0x12c>
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	10 e0       	ldi	r17, 0x00	; 0
    HIGH_RANGE;
  }
  
  /* Wait for completion, timing out after HIGH_RANGE_TIMEOUT */
  i = 0;
  while ((measure_state != STATE_DONE) && (++i < HIGH_RANGE_TIMEOUT)) {
 228:	80 91 27 01 	lds	r24, 0x0127
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	31 f0       	breq	.+12     	; 0x23c <measure+0xe6>
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	87 e2       	ldi	r24, 0x27	; 39
 236:	00 31       	cpi	r16, 0x10	; 16
 238:	18 07       	cpc	r17, r24
 23a:	71 f7       	brne	.-36     	; 0x218 <measure+0xc2>
    if (BUTTON_PUSHED)
      return 0;
  }
  
  /* Done, discharge cap now */
  LOW_RANGE;
 23c:	8d 98       	cbi	0x11, 5	; 17
 23e:	95 98       	cbi	0x12, 5	; 18
  DISCHARGE_ON;
 240:	8e 9a       	sbi	0x11, 6	; 17
  LED_OFF;
 242:	94 9a       	sbi	0x12, 4	; 18
  
  if (measure_state != STATE_DONE)
 244:	80 91 27 01 	lds	r24, 0x0127
 248:	90 91 83 00 	lds	r25, 0x0083
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	11 f0       	breq	.+4      	; 0x254 <measure+0xfe>
    rangemode |= RANGE_OVERFLOW;
 250:	98 60       	ori	r25, 0x08	; 8
 252:	01 c0       	rjmp	.+2      	; 0x256 <measure+0x100>
  else
    rangemode &= ~RANGE_OVERFLOW;
 254:	97 7f       	andi	r25, 0xF7	; 247
 256:	90 93 83 00 	sts	0x0083, r25
    
  measure_state = STATE_IDLE;
 25a:	10 92 27 01 	sts	0x0127, r1
  
  return ((unsigned long)timer_highword << 16) + TIMER_VALUE;
 25e:	80 91 28 01 	lds	r24, 0x0128
 262:	90 91 29 01 	lds	r25, 0x0129
 266:	2c b5       	in	r18, 0x2c	; 44
 268:	3d b5       	in	r19, 0x2d	; 45
 26a:	a0 e0       	ldi	r26, 0x00	; 0
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	8c 01       	movw	r16, r24
 270:	ff 24       	eor	r15, r15
 272:	ee 24       	eor	r14, r14
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	e2 0e       	add	r14, r18
 27a:	f3 1e       	adc	r15, r19
 27c:	04 1f       	adc	r16, r20
 27e:	15 1f       	adc	r17, r21
 280:	03 c0       	rjmp	.+6      	; 0x288 <measure+0x132>
 282:	ee 24       	eor	r14, r14
 284:	ff 24       	eor	r15, r15
 286:	87 01       	movw	r16, r14
}
 288:	b7 01       	movw	r22, r14
 28a:	c8 01       	movw	r24, r16
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	08 95       	ret

00000296 <calibrate>:
  rangemode = oldrange;
  
}

void calibrate(void)
{
 296:	bf 92       	push	r11
 298:	cf 92       	push	r12
 29a:	df 92       	push	r13
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
  char oldrange = rangemode;
 2a4:	b0 90 83 00 	lds	r11, 0x0083
  unsigned long value;
  
  rangemode = 0;
 2a8:	10 92 83 00 	sts	0x0083, r1
  value = measure();
 2ac:	54 df       	rcall	.-344    	; 0x156 <measure>
 2ae:	9b 01       	movw	r18, r22
 2b0:	ac 01       	movw	r20, r24
  value -= calib_offset[rangemode];
 2b2:	e0 91 83 00 	lds	r30, 0x0083
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
  calib[rangemode] = CALIB_LOW / (value>>8) + 1;
 2b8:	05 ee       	ldi	r16, 0xE5	; 229
 2ba:	c0 2e       	mov	r12, r16
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	d0 2e       	mov	r13, r16
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	86 01       	movw	r16, r12
 2c6:	0e 0f       	add	r16, r30
 2c8:	1f 1f       	adc	r17, r31
 2ca:	b6 e1       	ldi	r27, 0x16	; 22
 2cc:	eb 2e       	mov	r14, r27
 2ce:	b1 e0       	ldi	r27, 0x01	; 1
 2d0:	fb 2e       	mov	r15, r27
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	ee 0d       	add	r30, r14
 2d8:	ff 1d       	adc	r31, r15
 2da:	80 81       	ld	r24, Z
 2dc:	91 81       	ldd	r25, Z+1	; 0x01
 2de:	a2 81       	ldd	r26, Z+2	; 0x02
 2e0:	b3 81       	ldd	r27, Z+3	; 0x03
 2e2:	28 1b       	sub	r18, r24
 2e4:	39 0b       	sbc	r19, r25
 2e6:	4a 0b       	sbc	r20, r26
 2e8:	5b 0b       	sbc	r21, r27
 2ea:	23 2f       	mov	r18, r19
 2ec:	34 2f       	mov	r19, r20
 2ee:	45 2f       	mov	r20, r21
 2f0:	55 27       	eor	r21, r21
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e4       	ldi	r23, 0x40	; 64
 2f6:	82 e4       	ldi	r24, 0x42	; 66
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 d3       	rcall	.+1538   	; 0x8fe <__udivmodsi4>
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	f8 01       	movw	r30, r16
 302:	31 83       	std	Z+1, r19	; 0x01
 304:	20 83       	st	Z, r18

  rangemode = RANGE_HIGH_THRESH;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 83 00 	sts	0x0083, r24
  value = measure();
 30c:	24 df       	rcall	.-440    	; 0x156 <measure>
 30e:	9b 01       	movw	r18, r22
 310:	ac 01       	movw	r20, r24
  value -= calib_offset[rangemode];
 312:	e0 91 83 00 	lds	r30, 0x0083
 316:	f0 e0       	ldi	r31, 0x00	; 0
  calib[rangemode] = CALIB_LOW / (value>>8) + 1;
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	86 01       	movw	r16, r12
 31e:	0e 0f       	add	r16, r30
 320:	1f 1f       	adc	r17, r31
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	ee 0d       	add	r30, r14
 328:	ff 1d       	adc	r31, r15
 32a:	80 81       	ld	r24, Z
 32c:	91 81       	ldd	r25, Z+1	; 0x01
 32e:	a2 81       	ldd	r26, Z+2	; 0x02
 330:	b3 81       	ldd	r27, Z+3	; 0x03
 332:	28 1b       	sub	r18, r24
 334:	39 0b       	sbc	r19, r25
 336:	4a 0b       	sbc	r20, r26
 338:	5b 0b       	sbc	r21, r27
 33a:	23 2f       	mov	r18, r19
 33c:	34 2f       	mov	r19, r20
 33e:	45 2f       	mov	r20, r21
 340:	55 27       	eor	r21, r21
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	70 e4       	ldi	r23, 0x40	; 64
 346:	82 e4       	ldi	r24, 0x42	; 66
 348:	9f e0       	ldi	r25, 0x0F	; 15
 34a:	d9 d2       	rcall	.+1458   	; 0x8fe <__udivmodsi4>
 34c:	2f 5f       	subi	r18, 0xFF	; 255
 34e:	3f 4f       	sbci	r19, 0xFF	; 255
 350:	f8 01       	movw	r30, r16
 352:	31 83       	std	Z+1, r19	; 0x01
 354:	20 83       	st	Z, r18
  
  rangemode = RANGE_HIGH;
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	80 93 83 00 	sts	0x0083, r24
  value = measure();
 35c:	fc de       	rcall	.-520    	; 0x156 <measure>
 35e:	9b 01       	movw	r18, r22
 360:	ac 01       	movw	r20, r24
  value -= calib_offset[rangemode];
 362:	e0 91 83 00 	lds	r30, 0x0083
 366:	f0 e0       	ldi	r31, 0x00	; 0
  calib[rangemode] = CALIB_HIGH / value + 1;
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	86 01       	movw	r16, r12
 36e:	0e 0f       	add	r16, r30
 370:	1f 1f       	adc	r17, r31
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	ee 0d       	add	r30, r14
 378:	ff 1d       	adc	r31, r15
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	a2 81       	ldd	r26, Z+2	; 0x02
 380:	b3 81       	ldd	r27, Z+3	; 0x03
 382:	28 1b       	sub	r18, r24
 384:	39 0b       	sbc	r19, r25
 386:	4a 0b       	sbc	r20, r26
 388:	5b 0b       	sbc	r21, r27
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	88 ee       	ldi	r24, 0xE8	; 232
 390:	93 e0       	ldi	r25, 0x03	; 3
 392:	b5 d2       	rcall	.+1386   	; 0x8fe <__udivmodsi4>
 394:	2f 5f       	subi	r18, 0xFF	; 255
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	f8 01       	movw	r30, r16
 39a:	31 83       	std	Z+1, r19	; 0x01
 39c:	20 83       	st	Z, r18
 
  rangemode = RANGE_HIGH | RANGE_HIGH_THRESH;
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	80 93 83 00 	sts	0x0083, r24
  value = measure();
 3a4:	d8 de       	rcall	.-592    	; 0x156 <measure>
 3a6:	9b 01       	movw	r18, r22
 3a8:	ac 01       	movw	r20, r24
  value -= calib_offset[rangemode];
 3aa:	80 91 83 00 	lds	r24, 0x0083
 3ae:	90 e0       	ldi	r25, 0x00	; 0
  calib[rangemode] = CALIB_HIGH / value + 1;
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	c8 0e       	add	r12, r24
 3b6:	d9 1e       	adc	r13, r25
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	e8 0e       	add	r14, r24
 3be:	f9 1e       	adc	r15, r25
 3c0:	f7 01       	movw	r30, r14
 3c2:	80 81       	ld	r24, Z
 3c4:	91 81       	ldd	r25, Z+1	; 0x01
 3c6:	a2 81       	ldd	r26, Z+2	; 0x02
 3c8:	b3 81       	ldd	r27, Z+3	; 0x03
 3ca:	28 1b       	sub	r18, r24
 3cc:	39 0b       	sbc	r19, r25
 3ce:	4a 0b       	sbc	r20, r26
 3d0:	5b 0b       	sbc	r21, r27
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	88 ee       	ldi	r24, 0xE8	; 232
 3d8:	93 e0       	ldi	r25, 0x03	; 3
 3da:	91 d2       	rcall	.+1314   	; 0x8fe <__udivmodsi4>
 3dc:	2f 5f       	subi	r18, 0xFF	; 255
 3de:	3f 4f       	sbci	r19, 0xFF	; 255
 3e0:	f6 01       	movw	r30, r12
 3e2:	31 83       	std	Z+1, r19	; 0x01
 3e4:	20 83       	st	Z, r18
 
  rangemode = oldrange;
 3e6:	b0 92 83 00 	sts	0x0083, r11
  
}
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	ff 90       	pop	r15
 3f0:	ef 90       	pop	r14
 3f2:	df 90       	pop	r13
 3f4:	cf 90       	pop	r12
 3f6:	bf 90       	pop	r11
 3f8:	08 95       	ret

000003fa <calibrate_zero>:
  
  lcd_string(lcdbuffer,b);
}

void calibrate_zero(void)
{
 3fa:	ff 92       	push	r15
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
  char oldrange = rangemode;
 400:	f0 90 83 00 	lds	r15, 0x0083
  unsigned long l;
  
  rangemode = 0;
 404:	10 92 83 00 	sts	0x0083, r1
 
  l = measure();
 408:	a6 de       	rcall	.-692    	; 0x156 <measure>
  l = measure();
 40a:	a5 de       	rcall	.-694    	; 0x156 <measure>
  
  calib_offset[rangemode] = l;
 40c:	e0 91 83 00 	lds	r30, 0x0083
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	06 e1       	ldi	r16, 0x16	; 22
 414:	11 e0       	ldi	r17, 0x01	; 1
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	e0 0f       	add	r30, r16
 420:	f1 1f       	adc	r31, r17
 422:	60 83       	st	Z, r22
 424:	71 83       	std	Z+1, r23	; 0x01
 426:	82 83       	std	Z+2, r24	; 0x02
 428:	93 83       	std	Z+3, r25	; 0x03
  
  rangemode = RANGE_HIGH_THRESH;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	80 93 83 00 	sts	0x0083, r24
 
  l = measure();
 430:	92 de       	rcall	.-732    	; 0x156 <measure>
  l = measure();
 432:	91 de       	rcall	.-734    	; 0x156 <measure>
  
  calib_offset[rangemode] = l;
 434:	20 91 83 00 	lds	r18, 0x0083
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	22 0f       	add	r18, r18
 43c:	33 1f       	adc	r19, r19
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	02 0f       	add	r16, r18
 444:	13 1f       	adc	r17, r19
 446:	f8 01       	movw	r30, r16
 448:	60 83       	st	Z, r22
 44a:	71 83       	std	Z+1, r23	; 0x01
 44c:	82 83       	std	Z+2, r24	; 0x02
 44e:	93 83       	std	Z+3, r25	; 0x03
  
  rangemode = oldrange;
 450:	f0 92 83 00 	sts	0x0083, r15
  
}
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	08 95       	ret

0000045c <calc_and_show>:
   
   Routine is rather slow
*/

void calc_and_show(long value)
{
 45c:	af 92       	push	r10
 45e:	bf 92       	push	r11
 460:	cf 92       	push	r12
 462:	df 92       	push	r13
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	d6 2e       	mov	r13, r22
 46e:	c7 2e       	mov	r12, r23
 470:	b8 2e       	mov	r11, r24
 472:	a9 2e       	mov	r10, r25
  unsigned char b;
  unsigned long l;
  
  if (rangemode & RANGE_AUTO)
 474:	80 91 83 00 	lds	r24, 0x0083
 478:	82 ff       	sbrs	r24, 2
 47a:	03 c0       	rjmp	.+6      	; 0x482 <__stack+0x23>
    lcd_string("Auto ",0);
 47c:	80 e6       	ldi	r24, 0x60	; 96
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__stack+0x27>
  else
    lcd_string("Force",0);
 482:	86 e6       	ldi	r24, 0x66	; 102
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	6b d1       	rcall	.+726    	; 0x760 <lcd_string>

  if (rangemode & RANGE_HIGH) 
 48a:	80 91 83 00 	lds	r24, 0x0083
 48e:	81 ff       	sbrs	r24, 1
 490:	03 c0       	rjmp	.+6      	; 0x498 <__stack+0x39>
    lcd_string(" high",16);
 492:	8c e6       	ldi	r24, 0x6C	; 108
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__stack+0x3d>
  else
    lcd_string(" low ",16);
 498:	82 e7       	ldi	r24, 0x72	; 114
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	60 e1       	ldi	r22, 0x10	; 16
 49e:	60 d1       	rcall	.+704    	; 0x760 <lcd_string>
  
  if (rangemode & RANGE_OVERFLOW) {
 4a0:	80 91 83 00 	lds	r24, 0x0083
 4a4:	83 ff       	sbrs	r24, 3
 4a6:	17 c0       	rjmp	.+46     	; 0x4d6 <__stack+0x77>
    /* Todo - this smarter */
    lcdbuffer[0] = ' ';
 4a8:	20 e2       	ldi	r18, 0x20	; 32
 4aa:	20 93 2a 01 	sts	0x012A, r18
    lcdbuffer[1] = ' ';
 4ae:	20 93 2b 01 	sts	0x012B, r18
    lcdbuffer[2] = ' ';
 4b2:	20 93 2c 01 	sts	0x012C, r18
    lcdbuffer[3] = 'E';
 4b6:	85 e4       	ldi	r24, 0x45	; 69
 4b8:	80 93 2d 01 	sts	0x012D, r24
    lcdbuffer[4] = 'r';
 4bc:	92 e7       	ldi	r25, 0x72	; 114
 4be:	90 93 2e 01 	sts	0x012E, r25
    lcdbuffer[5] = 'r';
 4c2:	90 93 2f 01 	sts	0x012F, r25
    lcdbuffer[6] = 'o';
 4c6:	8f e6       	ldi	r24, 0x6F	; 111
 4c8:	80 93 30 01 	sts	0x0130, r24
    lcdbuffer[7] = 'r'; 
 4cc:	90 93 31 01 	sts	0x0131, r25
    lcdbuffer[8] = ' ';
 4d0:	20 93 32 01 	sts	0x0132, r18
 4d4:	6b c0       	rjmp	.+214    	; 0x5ac <L_dl3689+0x30>
  }
  else {
    /* Select calibration value */
    b = rangemode & 3;
  
    if (calib_offset[b] > value) {
 4d6:	83 70       	andi	r24, 0x03	; 3
 4d8:	a8 2f       	mov	r26, r24
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	fd 01       	movw	r30, r26
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	ea 5e       	subi	r30, 0xEA	; 234
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	e0 80       	ld	r14, Z
 4ec:	f1 80       	ldd	r15, Z+1	; 0x01
 4ee:	02 81       	ldd	r16, Z+2	; 0x02
 4f0:	13 81       	ldd	r17, Z+3	; 0x03
 4f2:	2d 2d       	mov	r18, r13
 4f4:	3c 2d       	mov	r19, r12
 4f6:	4b 2d       	mov	r20, r11
 4f8:	5a 2d       	mov	r21, r10
 4fa:	2e 15       	cp	r18, r14
 4fc:	3f 05       	cpc	r19, r15
 4fe:	40 07       	cpc	r20, r16
 500:	51 07       	cpc	r21, r17
 502:	50 f4       	brcc	.+20     	; 0x518 <__stack+0xb9>
      lcdbuffer[0] = '-';
 504:	8d e2       	ldi	r24, 0x2D	; 45
 506:	80 93 2a 01 	sts	0x012A, r24
      value = calib_offset[b] - value;
 50a:	c8 01       	movw	r24, r16
 50c:	b7 01       	movw	r22, r14
 50e:	62 1b       	sub	r22, r18
 510:	73 0b       	sbc	r23, r19
 512:	84 0b       	sbc	r24, r20
 514:	95 0b       	sbc	r25, r21
 516:	09 c0       	rjmp	.+18     	; 0x52a <__stack+0xcb>
    }
    else {
      lcdbuffer[0] = ' ';
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	80 93 2a 01 	sts	0x012A, r24
      value = value - calib_offset[b];
 51e:	ca 01       	movw	r24, r20
 520:	b9 01       	movw	r22, r18
 522:	6e 19       	sub	r22, r14
 524:	7f 09       	sbc	r23, r15
 526:	80 0b       	sbc	r24, r16
 528:	91 0b       	sbc	r25, r17
 52a:	8b 01       	movw	r16, r22
 52c:	9c 01       	movw	r18, r24
    }
    
    MUL_LONG_SHORT_S2(value, calib[b], l);
 52e:	aa 0f       	add	r26, r26
 530:	bb 1f       	adc	r27, r27
 532:	ab 51       	subi	r26, 0x1B	; 27
 534:	bf 4f       	sbci	r27, 0xFF	; 255
 536:	8d 91       	ld	r24, X+
 538:	9c 91       	ld	r25, X
 53a:	66 27       	eor	r22, r22
 53c:	55 27       	eor	r21, r21
 53e:	44 27       	eor	r20, r20
 540:	08 9f       	mul	r16, r24
 542:	71 2d       	mov	r23, r1
 544:	09 9f       	mul	r16, r25
 546:	70 0d       	add	r23, r0
 548:	41 1d       	adc	r20, r1
 54a:	56 1f       	adc	r21, r22
 54c:	18 9f       	mul	r17, r24
 54e:	70 0d       	add	r23, r0
 550:	41 1d       	adc	r20, r1
 552:	56 1f       	adc	r21, r22
 554:	19 9f       	mul	r17, r25
 556:	40 0d       	add	r20, r0
 558:	51 1d       	adc	r21, r1
 55a:	66 1f       	adc	r22, r22
 55c:	28 9f       	mul	r18, r24
 55e:	40 0d       	add	r20, r0
 560:	51 1d       	adc	r21, r1
 562:	08 f4       	brcc	.+2      	; 0x566 <L_dl1689>
 564:	63 95       	inc	r22

00000566 <L_dl1689>:
 566:	77 27       	eor	r23, r23
 568:	29 9f       	mul	r18, r25
 56a:	50 0d       	add	r21, r0
 56c:	61 1d       	adc	r22, r1
 56e:	08 f4       	brcc	.+2      	; 0x572 <L_dl2689>
 570:	73 95       	inc	r23

00000572 <L_dl2689>:
 572:	38 9f       	mul	r19, r24
 574:	50 0d       	add	r21, r0
 576:	61 1d       	adc	r22, r1
 578:	08 f4       	brcc	.+2      	; 0x57c <L_dl3689>
 57a:	73 95       	inc	r23

0000057c <L_dl3689>:
 57c:	39 9f       	mul	r19, r25
 57e:	60 0d       	add	r22, r0
 580:	71 1d       	adc	r23, r1
 582:	11 24       	eor	r1, r1
    
    b = long2ascii(lcdbuffer+1, l);
 584:	8b e2       	ldi	r24, 0x2B	; 43
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	47 d1       	rcall	.+654    	; 0x818 <long2ascii>
 58a:	e8 2f       	mov	r30, r24
    
    /* High range shifts 1E3 */
    if (rangemode & RANGE_HIGH)
 58c:	80 91 83 00 	lds	r24, 0x0083
 590:	81 fd       	sbrc	r24, 1
      b++;
 592:	ef 5f       	subi	r30, 0xFF	; 255
    
    lcdbuffer[6] = ' ';
 594:	80 e2       	ldi	r24, 0x20	; 32
 596:	80 93 30 01 	sts	0x0130, r24
    lcdbuffer[7] = decades[b];  /* range = 1 shifts 1E3 */
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	e2 58       	subi	r30, 0x82	; 130
 59e:	ff 4f       	sbci	r31, 0xFF	; 255
 5a0:	80 81       	ld	r24, Z
 5a2:	80 93 31 01 	sts	0x0131, r24
    lcdbuffer[8] = 'F';
 5a6:	86 e4       	ldi	r24, 0x46	; 70
 5a8:	80 93 32 01 	sts	0x0132, r24
    lcdbuffer[9] = 0;
 5ac:	10 92 33 01 	sts	0x0133, r1
  }
    
  /* Write high threshold in first line, low threshold in second */
  if (rangemode & RANGE_HIGH_THRESH)
 5b0:	80 91 83 00 	lds	r24, 0x0083
 5b4:	80 fd       	sbrc	r24, 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <L_dl3689+0x40>
 5b8:	67 e1       	ldi	r22, 0x17	; 23
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <L_dl3689+0x42>
 5bc:	67 e0       	ldi	r22, 0x07	; 7
    b=7;
  else
    b=23;
  
  lcd_string(lcdbuffer,b);
 5be:	8a e2       	ldi	r24, 0x2A	; 42
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	ce d0       	rcall	.+412    	; 0x760 <lcd_string>
}
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	cf 90       	pop	r12
 5d0:	bf 90       	pop	r11
 5d2:	af 90       	pop	r10
 5d4:	08 95       	ret

000005d6 <eeprom_write>:
  
}

void eeprom_write(void)
{
  eeprom_write_byte((void*)EEPROM_HEADER, 'C');
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	63 e4       	ldi	r22, 0x43	; 67
 5dc:	d3 d1       	rcall	.+934    	; 0x984 <__eewr_byte_m8>
  eeprom_write_byte((void*)EEPROM_HEADER+1, 'D');
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	64 e4       	ldi	r22, 0x44	; 68
 5e4:	cf d1       	rcall	.+926    	; 0x984 <__eewr_byte_m8>
  
  eeprom_write_block(calib_offset, (void*)EEPROM_DATA, SIZE_OF_CALIBOFFSET);
 5e6:	86 e1       	ldi	r24, 0x16	; 22
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	63 e0       	ldi	r22, 0x03	; 3
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	40 e1       	ldi	r20, 0x10	; 16
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	bf d1       	rcall	.+894    	; 0x972 <__eewr_block_m8>
  eeprom_write_block(calib, (void*)EEPROM_DATA + SIZE_OF_CALIBOFFSET, SIZE_OF_CALIB);
 5f4:	85 ee       	ldi	r24, 0xE5	; 229
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	63 e1       	ldi	r22, 0x13	; 19
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	48 e0       	ldi	r20, 0x08	; 8
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	b8 d1       	rcall	.+880    	; 0x972 <__eewr_block_m8>

}
 602:	08 95       	ret

00000604 <main>:
  //DIDR0 |= (1<<AIN1)|(1<<AIN0); 
  
}

int main(void)
{
 604:	1f 93       	push	r17


  unsigned long l;
  
  init();
 606:	62 dd       	rcall	.-1340   	; 0xcc <init>
 
  

	LED_ON;
 608:	94 98       	cbi	0x12, 4	; 18
  
	lcd_init();
 60a:	84 d0       	rcall	.+264    	; 0x714 <lcd_init>
	
	
	//eeprom_read();
	
	 
  asm("sei");
 60c:	78 94       	sei
  
      
  rangemode = RANGE_AUTO;
 60e:	84 e0       	ldi	r24, 0x04	; 4
 610:	80 93 83 00 	sts	0x0083, r24

	lcd_clear(); 
 614:	a1 d0       	rcall	.+322    	; 0x758 <lcd_clear>
	lcd_string("HELLO",0); 
 616:	88 e7       	ldi	r24, 0x78	; 120
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	a1 d0       	rcall	.+322    	; 0x760 <lcd_string>
*/

  
  while (1) {
	/*    Toggle high/low threshold*/
    rangemode ^= RANGE_HIGH_THRESH;
 61e:	11 e0       	ldi	r17, 0x01	; 1
 620:	80 91 83 00 	lds	r24, 0x0083
 624:	81 27       	eor	r24, r17
 626:	80 93 83 00 	sts	0x0083, r24
    l = measure();
 62a:	95 dd       	rcall	.-1238   	; 0x156 <measure>
    if (BUTTON_PUSHED) {
 62c:	82 99       	sbic	0x10, 2	; 16
 62e:	2a c0       	rjmp	.+84     	; 0x684 <main+0x80>
      /* Stop any cap. charging */
      LED_OFF;
 630:	94 9a       	sbi	0x12, 4	; 18
      LOW_RANGE;
 632:	8d 98       	cbi	0x11, 5	; 17
 634:	95 98       	cbi	0x12, 5	; 18
      DISCHARGE_ON;
 636:	8e 9a       	sbi	0x11, 6	; 17
      
      /* Menu implementation */
      switch(menu()) {
 638:	5a dd       	rcall	.-1356   	; 0xee <menu>
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	c1 f0       	breq	.+48     	; 0x66e <main+0x6a>
 63e:	83 30       	cpi	r24, 0x03	; 3
 640:	28 f4       	brcc	.+10     	; 0x64c <main+0x48>
 642:	88 23       	and	r24, r24
 644:	51 f0       	breq	.+20     	; 0x65a <main+0x56>
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	59 f7       	brne	.-42     	; 0x620 <main+0x1c>
 64a:	0b c0       	rjmp	.+22     	; 0x662 <main+0x5e>
 64c:	84 30       	cpi	r24, 0x04	; 4
 64e:	b1 f0       	breq	.+44     	; 0x67c <main+0x78>
 650:	84 30       	cpi	r24, 0x04	; 4
 652:	90 f0       	brcs	.+36     	; 0x678 <main+0x74>
 654:	85 30       	cpi	r24, 0x05	; 5
 656:	21 f7       	brne	.-56     	; 0x620 <main+0x1c>
 658:	13 c0       	rjmp	.+38     	; 0x680 <main+0x7c>
      case 0: /* auto range */
        rangemode |= RANGE_AUTO;
 65a:	80 91 83 00 	lds	r24, 0x0083
 65e:	84 60       	ori	r24, 0x04	; 4
 660:	03 c0       	rjmp	.+6      	; 0x668 <main+0x64>
        break; 
      case 1: /* low range */
        rangemode &= ~(RANGE_AUTO | RANGE_HIGH);
 662:	80 91 83 00 	lds	r24, 0x0083
 666:	89 7f       	andi	r24, 0xF9	; 249
 668:	80 93 83 00 	sts	0x0083, r24
 66c:	d9 cf       	rjmp	.-78     	; 0x620 <main+0x1c>
        break;  
      case 2: /* high range */
        rangemode &= ~RANGE_AUTO;
 66e:	80 91 83 00 	lds	r24, 0x0083
 672:	8b 7f       	andi	r24, 0xFB	; 251
        rangemode |= RANGE_HIGH;
 674:	82 60       	ori	r24, 0x02	; 2
 676:	f8 cf       	rjmp	.-16     	; 0x668 <main+0x64>
        break;  
      case 3: 
        calibrate_zero();
 678:	c0 de       	rcall	.-640    	; 0x3fa <calibrate_zero>
 67a:	d2 cf       	rjmp	.-92     	; 0x620 <main+0x1c>
        break;  
      case 4: 
        calibrate();
 67c:	0c de       	rcall	.-1000   	; 0x296 <calibrate>
 67e:	d0 cf       	rjmp	.-96     	; 0x620 <main+0x1c>
        break;  
      case 5: 
        eeprom_write();
 680:	aa df       	rcall	.-172    	; 0x5d6 <eeprom_write>
 682:	ce cf       	rjmp	.-100    	; 0x620 <main+0x1c>
        break;  
      }
      
    }
    else
      calc_and_show(l);
 684:	eb de       	rcall	.-554    	; 0x45c <calc_and_show>
 686:	cc cf       	rjmp	.-104    	; 0x620 <main+0x1c>

00000688 <eeprom_read>:
     
*/

void eeprom_read(void)
{
  if (eeprom_read_byte((void*)EEPROM_HEADER) != 'C')
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	6a d1       	rcall	.+724    	; 0x962 <__eerd_byte_m8>
 68e:	83 34       	cpi	r24, 0x43	; 67
 690:	99 f4       	brne	.+38     	; 0x6b8 <eeprom_read+0x30>
    return;
    
  if (eeprom_read_byte((void*)EEPROM_HEADER+1) != 'D')
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	65 d1       	rcall	.+714    	; 0x962 <__eerd_byte_m8>
 698:	84 34       	cpi	r24, 0x44	; 68
 69a:	71 f4       	brne	.+28     	; 0x6b8 <eeprom_read+0x30>
    return;
  
  eeprom_read_block(calib_offset, (void*)EEPROM_DATA, SIZE_OF_CALIBOFFSET);
 69c:	86 e1       	ldi	r24, 0x16	; 22
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	63 e0       	ldi	r22, 0x03	; 3
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	40 e1       	ldi	r20, 0x10	; 16
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	4c d1       	rcall	.+664    	; 0x942 <__eerd_block_m8>
  eeprom_read_block(calib, (void*)(EEPROM_DATA + SIZE_OF_CALIBOFFSET), SIZE_OF_CALIB);
 6aa:	85 ee       	ldi	r24, 0xE5	; 229
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	63 e1       	ldi	r22, 0x13	; 19
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	48 e0       	ldi	r20, 0x08	; 8
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	45 d1       	rcall	.+650    	; 0x942 <__eerd_block_m8>
 6b8:	08 95       	ret

000006ba <ms_spin>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	3f e0       	ldi	r19, 0x0F	; 15
 6be:	04 c0       	rjmp	.+8      	; 0x6c8 <ms_spin+0xe>
 6c0:	f9 01       	movw	r30, r18
 6c2:	31 97       	sbiw	r30, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <ms_spin+0x8>
        // accurate and not so much compiler dependent
        // as self made code.
	//
        while(ms){
                _delay_ms(0.96);
                ms--;
 6c6:	01 97       	sbiw	r24, 0x01	; 1
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
	//
        while(ms){
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	d1 f7       	brne	.-12     	; 0x6c0 <ms_spin+0x6>
                _delay_ms(0.96);
                ms--;
        }
}
 6cc:	08 95       	ret

000006ce <lcd_putchar>:
        );
}
*/

void lcd_putchar(unsigned char rs, unsigned char data )
{
 6ce:	38 2f       	mov	r19, r24
  // must set LCD-mode before calling this function!
  // RS = 1 LCD in character-mode
  // RS = 0 LCD in command-mode
  
  if (rs)
 6d0:	81 11       	cpse	r24, r1
 6d2:	30 e2       	ldi	r19, 0x20	; 32
    rs = (1<<RS_BIT);
  
  /* High nibble, rsbit and EN low */
  PORT = (0x0F & (data >> 4)) | rs ;
 6d4:	86 2f       	mov	r24, r22
 6d6:	82 95       	swap	r24
 6d8:	8f 70       	andi	r24, 0x0F	; 15
 6da:	83 2b       	or	r24, r19
 6dc:	88 bb       	out	0x18, r24	; 24
  
  /* Clock cyclus */
  PORT |= (1<<EN_BIT);
 6de:	c4 9a       	sbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6e0:	25 e0       	ldi	r18, 0x05	; 5
 6e2:	82 2f       	mov	r24, r18
 6e4:	8a 95       	dec	r24
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <lcd_putchar+0x16>
  
  _delay_loop_1(5);
  
  PORT &= ~(1<<EN_BIT);
 6e8:	c4 98       	cbi	0x18, 4	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	9f e0       	ldi	r25, 0x0F	; 15
 6ee:	fc 01       	movw	r30, r24
 6f0:	31 97       	sbiw	r30, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <lcd_putchar+0x22>
 6f4:	fc 01       	movw	r30, r24
 6f6:	31 97       	sbiw	r30, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <lcd_putchar+0x28>
  
  /* Wait a little */
  ms_spin(2);
  
  /* Low nibble, rsbit and EN low*/
  PORT = (data & 0x0F) | rs;
 6fa:	6f 70       	andi	r22, 0x0F	; 15
 6fc:	36 2b       	or	r19, r22
 6fe:	38 bb       	out	0x18, r19	; 24
  
  /* Clock cyclus */
  PORT |= (1<<EN_BIT);
 700:	c4 9a       	sbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 702:	2a 95       	dec	r18
 704:	f1 f7       	brne	.-4      	; 0x702 <lcd_putchar+0x34>
  
  _delay_loop_1(5);
  
  PORT &= ~(1<<EN_BIT);
 706:	c4 98       	cbi	0x18, 4	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 708:	fc 01       	movw	r30, r24
 70a:	31 97       	sbiw	r30, 0x01	; 1
 70c:	f1 f7       	brne	.-4      	; 0x70a <lcd_putchar+0x3c>
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <lcd_putchar+0x40>
  
  /* Wait a little */
  ms_spin(2);
}
 712:	08 95       	ret

00000714 <lcd_init>:


void lcd_init( void ) // must be run once before using the display
{
  /* Set ddr all out */
  PORT = 0; 
 714:	18 ba       	out	0x18, r1	; 24
  DDR = 0xFF;
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	87 bb       	out	0x17, r24	; 23
 71a:	82 e3       	ldi	r24, 0x32	; 50
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	3f e0       	ldi	r19, 0x0F	; 15
 722:	f9 01       	movw	r30, r18
 724:	31 97       	sbiw	r30, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <lcd_init+0x10>
        // accurate and not so much compiler dependent
        // as self made code.
	//
        while(ms){
                _delay_ms(0.96);
                ms--;
 728:	01 97       	sbiw	r24, 0x01	; 1
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
	//
        while(ms){
 72a:	d9 f7       	brne	.-10     	; 0x722 <lcd_init+0xe>
  ms_spin(50);   
  
  
  /* Configure 4 bit access */
  
  lcd_putchar(0, 0x33);
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	63 e3       	ldi	r22, 0x33	; 51
 730:	ce df       	rcall	.-100    	; 0x6ce <lcd_putchar>
  lcd_putchar(0, 0x32);
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	62 e3       	ldi	r22, 0x32	; 50
 736:	cb df       	rcall	.-106    	; 0x6ce <lcd_putchar>
  
  
  /* Setup lcd */
  
  lcd_putchar(0, 0x28);
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	68 e2       	ldi	r22, 0x28	; 40
 73c:	c8 df       	rcall	.-112    	; 0x6ce <lcd_putchar>
  lcd_putchar(0, 0x08);
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	68 e0       	ldi	r22, 0x08	; 8
 742:	c5 df       	rcall	.-118    	; 0x6ce <lcd_putchar>
  lcd_putchar(0, 0x0c);
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	6c e0       	ldi	r22, 0x0C	; 12
 748:	c2 df       	rcall	.-124    	; 0x6ce <lcd_putchar>
  lcd_putchar(0, 0x01);
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	61 e0       	ldi	r22, 0x01	; 1
 74e:	bf df       	rcall	.-130    	; 0x6ce <lcd_putchar>
  lcd_putchar(0, 0x06);
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	66 e0       	ldi	r22, 0x06	; 6
 754:	bc df       	rcall	.-136    	; 0x6ce <lcd_putchar>
  
}
 756:	08 95       	ret

00000758 <lcd_clear>:

void lcd_clear(void)
{
  /* Display clear  */
  lcd_putchar(0, CLR_DISP);  
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	61 e0       	ldi	r22, 0x01	; 1
 75c:	b8 df       	rcall	.-144    	; 0x6ce <lcd_putchar>

}
 75e:	08 95       	ret

00000760 <lcd_string>:

void lcd_string(char *p, unsigned char pos)
{
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	ec 01       	movw	r28, r24
 768:	16 2f       	mov	r17, r22
    
    // place cursor
    if (pos < 16) {
 76a:	60 31       	cpi	r22, 0x10	; 16
 76c:	10 f4       	brcc	.+4      	; 0x772 <lcd_string+0x12>
      lcd_putchar(0, DD_RAM_ADDR + pos);
 76e:	60 58       	subi	r22, 0x80	; 128
 770:	03 c0       	rjmp	.+6      	; 0x778 <lcd_string+0x18>
    } 
    else if (pos < 32) {
 772:	60 32       	cpi	r22, 0x20	; 32
 774:	90 f4       	brcc	.+36     	; 0x79a <lcd_string+0x3a>
        lcd_putchar(0, DD_RAM_ADDR2 + (pos-16));
 776:	60 55       	subi	r22, 0x50	; 80
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	a9 df       	rcall	.-174    	; 0x6ce <lcd_putchar>
 77c:	0b c0       	rjmp	.+22     	; 0x794 <lcd_string+0x34>
    else
       return;
    
    // Write text
    while (*p) {
      if (pos > 31)
 77e:	10 32       	cpi	r17, 0x20	; 32
 780:	61 f0       	breq	.+24     	; 0x79a <lcd_string+0x3a>
        break;
        
      lcd_putchar(1, *(p++));
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	a4 df       	rcall	.-184    	; 0x6ce <lcd_putchar>
      
      if (++pos == 16)
 786:	1f 5f       	subi	r17, 0xFF	; 255
 788:	10 31       	cpi	r17, 0x10	; 16
 78a:	19 f4       	brne	.+6      	; 0x792 <lcd_string+0x32>
        lcd_putchar(0, DD_RAM_ADDR2);
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	60 ec       	ldi	r22, 0xC0	; 192
 790:	9e df       	rcall	.-196    	; 0x6ce <lcd_putchar>
    // Write text
    while (*p) {
      if (pos > 31)
        break;
        
      lcd_putchar(1, *(p++));
 792:	21 96       	adiw	r28, 0x01	; 1
    } 
    else
       return;
    
    // Write text
    while (*p) {
 794:	68 81       	ld	r22, Y
 796:	66 23       	and	r22, r22
 798:	91 f7       	brne	.-28     	; 0x77e <lcd_string+0x1e>
      
      if (++pos == 16)
        lcd_putchar(0, DD_RAM_ADDR2);
      
    }
}
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	08 95       	ret

000007a2 <hex2ascii>:
   
   0123.4567  (pointplace = 2)
   89ABCD.EF  (pointplace = 1)
*/
void hex2ascii(char *target, long value, char pointplace)
{
 7a2:	ef 92       	push	r14
 7a4:	ff 92       	push	r15
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	ec 01       	movw	r28, r24
 7b0:	03 e0       	ldi	r16, 0x03	; 3
 7b2:	10 e0       	ldi	r17, 0x00	; 0
     
     *(target++) = ((hex < 0x0A) ? (hex + '0') : (hex + ('A' - 0x0A)));
     
     value <<= 8;
     
     if (i == pointplace) 
 7b4:	e2 2e       	mov	r14, r18
 7b6:	ff 24       	eor	r15, r15
       *(target++) = '.';
 7b8:	2e e2       	ldi	r18, 0x2E	; 46
   int i;
   unsigned char hex;
   
   for (i=3; i>=0; i--) {
     
     hex = value>>24;   /* Get msbyte */
 7ba:	87 2f       	mov	r24, r23
 7bc:	bb 27       	eor	r27, r27
 7be:	87 fd       	sbrc	r24, 7
 7c0:	b0 95       	com	r27
 7c2:	9b 2f       	mov	r25, r27
 7c4:	ab 2f       	mov	r26, r27
     SWAP_NIBBLES(hex); /* Get high nibble */
 7c6:	38 2f       	mov	r19, r24
 7c8:	32 95       	swap	r19
     hex &= 0x0F;
 7ca:	3f 70       	andi	r19, 0x0F	; 15
     
     *(target++) = ((hex < 0x0A) ? (hex + '0') : (hex + ('A' - 0x0A)));
 7cc:	3a 30       	cpi	r19, 0x0A	; 10
 7ce:	10 f4       	brcc	.+4      	; 0x7d4 <hex2ascii+0x32>
 7d0:	30 5d       	subi	r19, 0xD0	; 208
 7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <hex2ascii+0x34>
 7d4:	39 5c       	subi	r19, 0xC9	; 201
 7d6:	fe 01       	movw	r30, r28
 7d8:	31 93       	st	Z+, r19
     
     hex = value>>24;   /* Get msbyte */     
     hex &= 0x0F;       /* Get low nibble */
 7da:	8f 70       	andi	r24, 0x0F	; 15
     
     *(target++) = ((hex < 0x0A) ? (hex + '0') : (hex + ('A' - 0x0A)));
 7dc:	8a 30       	cpi	r24, 0x0A	; 10
 7de:	10 f4       	brcc	.+4      	; 0x7e4 <hex2ascii+0x42>
 7e0:	80 5d       	subi	r24, 0xD0	; 208
 7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <hex2ascii+0x44>
 7e4:	89 5c       	subi	r24, 0xC9	; 201
 7e6:	ef 01       	movw	r28, r30
 7e8:	89 93       	st	Y+, r24
     
     value <<= 8;
     
     if (i == pointplace) 
 7ea:	0e 15       	cp	r16, r14
 7ec:	1f 05       	cpc	r17, r15
 7ee:	11 f4       	brne	.+4      	; 0x7f4 <hex2ascii+0x52>
       *(target++) = '.';
 7f0:	21 83       	std	Z+1, r18	; 0x01
 7f2:	21 96       	adiw	r28, 0x01	; 1
void hex2ascii(char *target, long value, char pointplace)
{
   int i;
   unsigned char hex;
   
   for (i=3; i>=0; i--) {
 7f4:	01 50       	subi	r16, 0x01	; 1
 7f6:	10 40       	sbci	r17, 0x00	; 0
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	0f 3f       	cpi	r16, 0xFF	; 255
 7fc:	18 07       	cpc	r17, r24
 7fe:	29 f0       	breq	.+10     	; 0x80a <hex2ascii+0x68>
     hex = value>>24;   /* Get msbyte */     
     hex &= 0x0F;       /* Get low nibble */
     
     *(target++) = ((hex < 0x0A) ? (hex + '0') : (hex + ('A' - 0x0A)));
     
     value <<= 8;
 800:	76 2f       	mov	r23, r22
 802:	65 2f       	mov	r22, r21
 804:	54 2f       	mov	r21, r20
 806:	44 27       	eor	r20, r20
 808:	d8 cf       	rjmp	.-80     	; 0x7ba <hex2ascii+0x18>
       *(target++) = '.';
      
   }
   
   
}
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	ff 90       	pop	r15
 814:	ef 90       	pop	r14
 816:	08 95       	ret

00000818 <long2ascii>:
   x.xxx.xxx.xxx
*/

unsigned long tenths_tab[10] = {1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1};
char long2ascii(char *target, unsigned long value)
{
 818:	bf 92       	push	r11
 81a:	cf 92       	push	r12
 81c:	df 92       	push	r13
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	7c 01       	movw	r14, r24
 82c:	cd ee       	ldi	r28, 0xED	; 237
 82e:	d0 e0       	ldi	r29, 0x00	; 0
 830:	20 e0       	ldi	r18, 0x00	; 0
 832:	10 e0       	ldi	r17, 0x00	; 0
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	00 e0       	ldi	r16, 0x00	; 0
          pos++;
        }
      }
    } 
    else {
      target[pos] = '0';
 838:	a0 e3       	ldi	r26, 0x30	; 48
 83a:	ca 2e       	mov	r12, r26
        pos++;
      }
      else {
        /* Check if we need to pad with spaces */
        if (p>=6) {
          target[pos] = ' ';
 83c:	f0 e2       	ldi	r31, 0x20	; 32
 83e:	df 2e       	mov	r13, r31
        ret++;
      case 4: 
        ret++;
      case 7: 
        ret++;
        target[pos] = '.';  
 840:	ee e2       	ldi	r30, 0x2E	; 46
 842:	be 2e       	mov	r11, r30
 844:	11 c0       	rjmp	.+34     	; 0x868 <long2ascii+0x50>
  unsigned char numbernow=0;
  char ret=0;
  
  for (p=0;(p<10) && (pos<5);p++) {
    
    if (numbernow) {
 846:	00 23       	and	r16, r16
 848:	71 f0       	breq	.+28     	; 0x866 <long2ascii+0x4e>
      /* Eventually place dot */
      /* Notice the nice fallthrough construction. */
      switch(p) {
 84a:	34 30       	cpi	r19, 0x04	; 4
 84c:	29 f0       	breq	.+10     	; 0x858 <long2ascii+0x40>
 84e:	37 30       	cpi	r19, 0x07	; 7
 850:	21 f0       	breq	.+8      	; 0x85a <long2ascii+0x42>
 852:	31 30       	cpi	r19, 0x01	; 1
 854:	41 f4       	brne	.+16     	; 0x866 <long2ascii+0x4e>
      case 1: 
        ret++;
 856:	1f 5f       	subi	r17, 0xFF	; 255
      case 4: 
        ret++;
 858:	1f 5f       	subi	r17, 0xFF	; 255
      case 7: 
        ret++;
 85a:	1f 5f       	subi	r17, 0xFF	; 255
        target[pos] = '.';  
 85c:	f7 01       	movw	r30, r14
 85e:	e2 0f       	add	r30, r18
 860:	f1 1d       	adc	r31, r1
 862:	b0 82       	st	Z, r11
        pos++;
 864:	2f 5f       	subi	r18, 0xFF	; 255
 866:	24 96       	adiw	r28, 0x04	; 4
      }      
    }
    
    if (value < tenths_tab[p]) {
 868:	88 81       	ld	r24, Y
 86a:	99 81       	ldd	r25, Y+1	; 0x01
 86c:	aa 81       	ldd	r26, Y+2	; 0x02
 86e:	bb 81       	ldd	r27, Y+3	; 0x03
 870:	48 17       	cp	r20, r24
 872:	59 07       	cpc	r21, r25
 874:	6a 07       	cpc	r22, r26
 876:	7b 07       	cpc	r23, r27
 878:	b0 f4       	brcc	.+44     	; 0x8a6 <long2ascii+0x8e>
      if (numbernow) {
 87a:	00 23       	and	r16, r16
 87c:	29 f0       	breq	.+10     	; 0x888 <long2ascii+0x70>
        /* Inside number, put a zero */
        target[pos] = '0';  
 87e:	f7 01       	movw	r30, r14
 880:	e2 0f       	add	r30, r18
 882:	f1 1d       	adc	r31, r1
 884:	c0 82       	st	Z, r12
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <long2ascii+0x8a>
        pos++;
      }
      else {
        /* Check if we need to pad with spaces */
        if (p>=6) {
 888:	36 30       	cpi	r19, 0x06	; 6
 88a:	40 f1       	brcs	.+80     	; 0x8dc <long2ascii+0xc4>
          target[pos] = ' ';
 88c:	f7 01       	movw	r30, r14
 88e:	e2 0f       	add	r30, r18
 890:	f1 1d       	adc	r31, r1
 892:	d0 82       	st	Z, r13
          pos++;
 894:	2f 5f       	subi	r18, 0xFF	; 255
        }
        
        if (p==6) {
 896:	36 30       	cpi	r19, 0x06	; 6
 898:	09 f5       	brne	.+66     	; 0x8dc <long2ascii+0xc4>
          /* We also need to place a space instead of . */
          target[pos] = ' ';
 89a:	f7 01       	movw	r30, r14
 89c:	e2 0f       	add	r30, r18
 89e:	f1 1d       	adc	r31, r1
 8a0:	d0 82       	st	Z, r13
          pos++;
 8a2:	2f 5f       	subi	r18, 0xFF	; 255
 8a4:	1b c0       	rjmp	.+54     	; 0x8dc <long2ascii+0xc4>
        }
      }
    } 
    else {
      target[pos] = '0';
 8a6:	f7 01       	movw	r30, r14
 8a8:	e2 0f       	add	r30, r18
 8aa:	f1 1d       	adc	r31, r1
 8ac:	c0 82       	st	Z, r12
 8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <long2ascii+0xae>
      while (value >= tenths_tab[p]) {
        target[pos]++;
 8b0:	80 81       	ld	r24, Z
 8b2:	8f 5f       	subi	r24, 0xFF	; 255
 8b4:	80 83       	st	Z, r24
        value -= tenths_tab[p];
 8b6:	88 81       	ld	r24, Y
 8b8:	99 81       	ldd	r25, Y+1	; 0x01
 8ba:	aa 81       	ldd	r26, Y+2	; 0x02
 8bc:	bb 81       	ldd	r27, Y+3	; 0x03
 8be:	48 1b       	sub	r20, r24
 8c0:	59 0b       	sbc	r21, r25
 8c2:	6a 0b       	sbc	r22, r26
 8c4:	7b 0b       	sbc	r23, r27
        }
      }
    } 
    else {
      target[pos] = '0';
      while (value >= tenths_tab[p]) {
 8c6:	88 81       	ld	r24, Y
 8c8:	99 81       	ldd	r25, Y+1	; 0x01
 8ca:	aa 81       	ldd	r26, Y+2	; 0x02
 8cc:	bb 81       	ldd	r27, Y+3	; 0x03
 8ce:	48 17       	cp	r20, r24
 8d0:	59 07       	cpc	r21, r25
 8d2:	6a 07       	cpc	r22, r26
 8d4:	7b 07       	cpc	r23, r27
 8d6:	60 f7       	brcc	.-40     	; 0x8b0 <long2ascii+0x98>
        target[pos]++;
        value -= tenths_tab[p];
      }
      pos++;
 8d8:	2f 5f       	subi	r18, 0xFF	; 255
 8da:	01 e0       	ldi	r16, 0x01	; 1
{
  unsigned char p, pos=0;
  unsigned char numbernow=0;
  char ret=0;
  
  for (p=0;(p<10) && (pos<5);p++) {
 8dc:	3f 5f       	subi	r19, 0xFF	; 255
 8de:	3a 30       	cpi	r19, 0x0A	; 10
 8e0:	19 f0       	breq	.+6      	; 0x8e8 <long2ascii+0xd0>
 8e2:	25 30       	cpi	r18, 0x05	; 5
 8e4:	08 f4       	brcc	.+2      	; 0x8e8 <long2ascii+0xd0>
 8e6:	af cf       	rjmp	.-162    	; 0x846 <long2ascii+0x2e>
      numbernow = 1;
    }
  }
  
  return ret;
}
 8e8:	81 2f       	mov	r24, r17
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	1f 91       	pop	r17
 8f0:	0f 91       	pop	r16
 8f2:	ff 90       	pop	r15
 8f4:	ef 90       	pop	r14
 8f6:	df 90       	pop	r13
 8f8:	cf 90       	pop	r12
 8fa:	bf 90       	pop	r11
 8fc:	08 95       	ret

000008fe <__udivmodsi4>:
 8fe:	a1 e2       	ldi	r26, 0x21	; 33
 900:	1a 2e       	mov	r1, r26
 902:	aa 1b       	sub	r26, r26
 904:	bb 1b       	sub	r27, r27
 906:	fd 01       	movw	r30, r26
 908:	0d c0       	rjmp	.+26     	; 0x924 <__udivmodsi4_ep>

0000090a <__udivmodsi4_loop>:
 90a:	aa 1f       	adc	r26, r26
 90c:	bb 1f       	adc	r27, r27
 90e:	ee 1f       	adc	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	a2 17       	cp	r26, r18
 914:	b3 07       	cpc	r27, r19
 916:	e4 07       	cpc	r30, r20
 918:	f5 07       	cpc	r31, r21
 91a:	20 f0       	brcs	.+8      	; 0x924 <__udivmodsi4_ep>
 91c:	a2 1b       	sub	r26, r18
 91e:	b3 0b       	sbc	r27, r19
 920:	e4 0b       	sbc	r30, r20
 922:	f5 0b       	sbc	r31, r21

00000924 <__udivmodsi4_ep>:
 924:	66 1f       	adc	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	1a 94       	dec	r1
 92e:	69 f7       	brne	.-38     	; 0x90a <__udivmodsi4_loop>
 930:	60 95       	com	r22
 932:	70 95       	com	r23
 934:	80 95       	com	r24
 936:	90 95       	com	r25
 938:	9b 01       	movw	r18, r22
 93a:	ac 01       	movw	r20, r24
 93c:	bd 01       	movw	r22, r26
 93e:	cf 01       	movw	r24, r30
 940:	08 95       	ret

00000942 <__eerd_block_m8>:
 942:	dc 01       	movw	r26, r24
 944:	cb 01       	movw	r24, r22

00000946 <__eerd_blraw_m8>:
 946:	fc 01       	movw	r30, r24
 948:	e1 99       	sbic	0x1c, 1	; 28
 94a:	fe cf       	rjmp	.-4      	; 0x948 <__eerd_blraw_m8+0x2>
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__eerd_blraw_m8+0x14>
 94e:	ff bb       	out	0x1f, r31	; 31
 950:	ee bb       	out	0x1e, r30	; 30
 952:	e0 9a       	sbi	0x1c, 0	; 28
 954:	31 96       	adiw	r30, 0x01	; 1
 956:	0d b2       	in	r0, 0x1d	; 29
 958:	0d 92       	st	X+, r0
 95a:	41 50       	subi	r20, 0x01	; 1
 95c:	50 40       	sbci	r21, 0x00	; 0
 95e:	b8 f7       	brcc	.-18     	; 0x94e <__eerd_blraw_m8+0x8>
 960:	08 95       	ret

00000962 <__eerd_byte_m8>:
 962:	e1 99       	sbic	0x1c, 1	; 28
 964:	fe cf       	rjmp	.-4      	; 0x962 <__eerd_byte_m8>
 966:	9f bb       	out	0x1f, r25	; 31
 968:	8e bb       	out	0x1e, r24	; 30
 96a:	e0 9a       	sbi	0x1c, 0	; 28
 96c:	99 27       	eor	r25, r25
 96e:	8d b3       	in	r24, 0x1d	; 29
 970:	08 95       	ret

00000972 <__eewr_block_m8>:
 972:	dc 01       	movw	r26, r24
 974:	cb 01       	movw	r24, r22
 976:	02 c0       	rjmp	.+4      	; 0x97c <__eewr_block_m8+0xa>
 978:	2d 91       	ld	r18, X+
 97a:	05 d0       	rcall	.+10     	; 0x986 <__eewr_r18_m8>
 97c:	41 50       	subi	r20, 0x01	; 1
 97e:	50 40       	sbci	r21, 0x00	; 0
 980:	d8 f7       	brcc	.-10     	; 0x978 <__eewr_block_m8+0x6>
 982:	08 95       	ret

00000984 <__eewr_byte_m8>:
 984:	26 2f       	mov	r18, r22

00000986 <__eewr_r18_m8>:
 986:	e1 99       	sbic	0x1c, 1	; 28
 988:	fe cf       	rjmp	.-4      	; 0x986 <__eewr_r18_m8>
 98a:	9f bb       	out	0x1f, r25	; 31
 98c:	8e bb       	out	0x1e, r24	; 30
 98e:	2d bb       	out	0x1d, r18	; 29
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	f8 94       	cli
 994:	e2 9a       	sbi	0x1c, 2	; 28
 996:	e1 9a       	sbi	0x1c, 1	; 28
 998:	0f be       	out	0x3f, r0	; 63
 99a:	01 96       	adiw	r24, 0x01	; 1
 99c:	08 95       	ret

0000099e <_exit>:
 99e:	f8 94       	cli

000009a0 <__stop_program>:
 9a0:	ff cf       	rjmp	.-2      	; 0x9a0 <__stop_program>
